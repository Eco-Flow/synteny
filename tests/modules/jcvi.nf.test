nextflow_process {

    name "Test Process JCVI"
    script "modules/jcvi.nf"
    process "JCVI"

    test("Should run without failures") {

        when {
            params {
                // define parameters here:
                clean = false
            }
            process {
                """
                // define inputs of the process here. Example:
                Channel.of( ["Drosophila_yakuba", file("${projectDir}/data/jcvi_input/Drosophila_yakuba.nucl.fa.gz"), file("${projectDir}/data/jcvi_input/Drosophila_yakuba.gff_for_jvci.gff3.gz")] ).set{ in_channel } 
                input[0] = in_channel
                """
            }
        }

        then {
            //check if test case succeeded
            assert process.success
            //analyze trace file (TODO: workout how this works with retry)
            assert process.trace.tasks().size() == 1
            with(process.out) {
              //checks one file exists in anchors channel
              assert anchors.size() == 1
              //checks one tuple exists in pdf channel
              assert pdf.size() == 1
              //check pdf tuple contains 3 elements
              assert pdf[0].size() == 3
              //checks one file exists in percsim channel
              assert percsim.size() == 1
              //checks one file exists in last channel
              assert last.size() == 1
              //checks output files aren't corrupted
              assert path(anchors[0]).md5 == '375298377779855bd3d2fc89847b60c0'
              assert path(pdf[0].get(0)).md5 == 'ed322865865a1d7870737477115bfd22'
              assert path(pdf[0].get(1)).md5 == '810e2fc266db49b1fa7c6306322a7062'
              assert path(pdf[0].get(2)).md5 == 'bb4d1df402326ca00288dcf115dc7628'
              assert path(percsim[0]).md5 == 'bf25abfbeef218a2b20d1988dada8865'
              assert path(last[0]).md5 == 'e4fc55949bcd1bfbd09d323e0109ac8d'
            }
        }

    }

}
