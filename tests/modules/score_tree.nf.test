nextflow_process {

    name "Test Process SCORE_TREE"
    script "modules/score_tree.nf"
    process "SCORE_TREE"

    test("Should run without failures") {

        when {
            params {
                // define parameters here. Example:
                clean = false
            }
            process {
                """
                // define inputs of the process here. Example:
                Channel.fromPath( "${projectDir}/data/chromopaint_input/Drosophila_santomea.Drosophila_simulans.anchors").set{ anchor_ch }
                input[0] = Channel.fromPath( "${projectDir}/data/score_input/*.anchors").collect().combine(anchor_ch)
                input[1] = Channel.fromPath( "${projectDir}/data/score_input/*.percent.similarity").collect()
                Channel.fromPath( "${projectDir}/data/jcvi_input/Drosophila_yakuba.gff_for_jvci.gff3.gz").set{ gff_ch }
                input[2] = Channel.fromPath( "${projectDir}/data/score_input/*.gff_for_jvci.gff3.gz").collect().combine(gff_ch)
                input[3] = Channel.fromPath( "${projectDir}/data/score_tree_input/tree.txt" )
                """
            }
        }

        then {
            //check if test case succeeded
            assert process.success
            //analyze trace file
            assert process.trace.tasks().size() == 1
            with(process.out) {
              //checks one file exists in score_combine channel
              assert score_combine.size() == 1
              //check file corruption
              assert path(score_combine[0]).md5 == '246f2a06b9467c0968b56b812d32bb8a'
              //checks one file exists in simil_combine channel
              assert simil_combine.size() == 1
              //check file corruption
              assert path(simil_combine[0]).md5 == '0f4ec255d94aab52edcc2d32beee6c37'
              //checks one file exists in pairwiseplot channel
              assert pairwiseplot.size() == 1
              //checks one file exists in pairdata channel
              assert pairdata.size() == 1
              //check file corruption
              assert path(pairdata[0]).md5 == '38ea6deda1a5bb5d5eb0f15b4345cb0a'
              //checks one file exists in synmat channel
              assert synmat.size() == 1
              //check file corruption
              assert path(synmat[0]).md5 == '4f3645157ef99b991617abebf0c69a1b'
              //checks one tuple exists in pairedgenescores channel
              assert pairedgenescores.size() == 1
              //checks pairedgenescores tuple contains 6 elements
              assert pairedgenescores[0].size() == 6
              //checks one tuple exists in speciesSummary channel
              assert speciesSummary.size() == 1
              //checks speciesSummary tuple contains 3 elements
              assert speciesSummary[0].size() == 3
              //checks one file exists in trans_inver_summary channel
              assert trans_inver_summary.size() == 1
              //check file corruption
              assert path(trans_inver_summary[0]).md5 == '5eab2ef82b406b9f930adb5b1ad86a8f'
              //checks one file exists in emeline_plots channel
              assert emeline_plots.size() == 1
            }
        }
    }
}
