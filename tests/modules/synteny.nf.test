nextflow_process {

    name "Test Process SYNTENY"
    script "modules/local/synteny.nf"
    process "SYNTENY"

    test("Should run without failures") {

        when {
            params {
                // define parameters here:
                clean = false
            }
            process {
                """
                // define inputs of the process here. Example:
                //PLEASE NOTE: These files are too big to go in GitHub as they exceed total limit of storage in the repo so until Amazon S3 is set up they are stored in google drive for github actions
                Channel.of( ["Drosophila_santomea", file("${projectDir}/data/synteny_input/Drosophila_santomea.cds"), file("${projectDir}/data/synteny_input/Drosophila_santomea.bed"), "Drosophila_simulans", file("${projectDir}/data/synteny_input/Drosophila_simulans.cds"), file("${projectDir}/data/synteny_input/Drosophila_simulans.bed")] ).set{ in_channel }
                input[0] = in_channel
                """
            }
        }

        then {
            //check if test case succeeded
            assert process.success
            //analyze trace file
            assert process.trace.tasks().size() == 1
            with(process.out) {
              //checks one file exists in anchors channel
              assert anchors.size() == 1
              //checks one tuple exists in pdf channel
              assert pdf.size() == 1
              //check pdf tuple contains 3 elements
              assert pdf[0].size() == 3
              //checks one file exists in percsim channel
              assert percsim.size() == 1
              //checks one file exists in last channel
              assert last.size() == 1
              //checks output files aren't corrupted
              assert path(anchors[0]).md5 == '438094fa8e040b674be3a52550b77943'
              assert path(percsim[0]).md5 == 'ef51a68fef6324399cc23afeef5c67e6'
              assert path(last[0]).md5 == '1a6d8260c74adac5448c041d4106c4f1'
            }
        }
    }
}
